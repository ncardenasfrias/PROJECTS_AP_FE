dplyr::summarise(AvgTop = mean(value)),
Firm_yearly%>%
filter(!is.na(BookMarket) & BookMarket<MedianBMt & !is.na(value))%>%
group_by(Date)%>%
dplyr::summarise(AvgBot = mean(value)),
by = "Date")
DiffBM$HMLest = DiffBM$AvgTop-DiffBM$AvgBot
Firm_yearly
Firm_yearly =merge(Firm_yearly, DiffBM, by = "Date")
Firm_yearly =merge(Firm_yearly, DiffMC, by = "Date")
colnames(Firm_yearly)
Firm_yearly <- Firm_yearly[order(Firm_yearly$Company, Firm_yearly$Date), ]
Firm_yearly$Return <- with(Firm_yearly, ave(value, Company, FUN = function(x) c(NA, diff(x))))
Data_year = read_csv("DATA_year.csv")
Data_year = read_csv("Data_year.csv")
Data_year = read_csv("DATA_yearly.csv")
Firm_yearly =merge(Firm_yearly, Data_year, by = "Date")
Firms_yearly$mkt_free = Firms_yearly$DCAC40 - Firms_yearly$Doat
Firm_yearly$mkt_free = Firm_yearly$DCAC40 - Firm_yearly$Doat
Firm_yearly$DCAC40 = c(NA, diff(Firm_yearly$CAC40))
Firm_yearly$Doat = c(NA, diff(Firm_yearly$oat))
Firm_yearly$mkt_free = Firm_yearly$DCAC40 - Firm_yearly$Doat
fit_lm_myFFonly <- function(data) {
lm(Return ~ mkt_fee+HMLest+SMBest, data = data)
}
filtered_Firm_yearly <- Firm_yearly %>% #Filter rows between 2010 and 2022 (no missing values)
filter(Date >= as.Date("2010-01-01") & Date <= as.Date("2022-12-31"))
fit_lm_myFFonly <- function(data) {
lm(Return ~ mkt_fee+HMLest+SMBest, data = data)
}
year_by_stock_FF = split(filtered_Firm_yearly, filtered_Firm_yearly$Company.x)
regs_beta_myFF <- lapply(year_by_stock_FF, function(subset) fit_lm_myFFonly(subset))
fit_lm_myFFonly <- function(data) {
lm(Return ~ mkt_free+HMLest+SMBest, data = data)
}
regs_beta_myFF <- lapply(year_by_stock_FF, function(subset) fit_lm_myFFonly(subset))
stargazer(regs_beta_myFF,
title = "Estimate the beta coefficients for computed French and Fama factors (2010-2022)",
column.labels = names(regs_beta_myFF),
out="Tables/betas_myff.tex")
Firm_yearly$mkt_free = Firm_yearly$DCAC40 - Firm_yearly$Doat
#### FF model with annual data and our estimation for this sample
Firm_yearly <- read_csv("Firm_yearly.csv")
Firm_yearly = merge(Firm_yearly,
Firm_yearly%>%
filter(!is.na(MarketCap))%>%
group_by(Date)%>%
dplyr::summarise(MedianMCt=median(MarketCap)),
by="Date")
DiffMC = merge(
Firm_yearly%>%
filter(!is.na(MarketCap) & MarketCap>MedianMCt & !is.na(value))%>%
group_by(Date)%>%
dplyr::summarise(AvgTop = mean(value)),
Firm_yearly%>%
filter(!is.na(MarketCap) & MarketCap<MedianMCt & !is.na(value))%>%
group_by(Date)%>%
dplyr::summarise(AvgBot = mean(value)),
by = "Date")
DiffMC$SMBest = DiffMC$AvgTop-DiffMC$AvgBot
Firm_yearly = merge(Firm_yearly,
Firm_yearly%>%
filter(!is.na(BookMarket))%>%
group_by(Date)%>%
dplyr::summarise(MedianBMt=median(BookMarket)),
by="Date")
DiffBM = merge(
Firm_yearly%>%
filter(!is.na(BookMarket) & BookMarket>MedianBMt & !is.na(value))%>%
group_by(Date)%>%
dplyr::summarise(AvgTop = mean(value)),
Firm_yearly%>%
filter(!is.na(BookMarket) & BookMarket<MedianBMt & !is.na(value))%>%
group_by(Date)%>%
dplyr::summarise(AvgBot = mean(value)),
by = "Date")
DiffBM$HMLest = DiffBM$AvgTop-DiffBM$AvgBot
Firm_yearly =merge(Firm_yearly, DiffBM, by = "Date")
Firm_yearly =merge(Firm_yearly, DiffMC, by = "Date")
Data_year = read_csv("DATA_yearly.csv")
Firm_yearly =merge(Firm_yearly, Data_year, by = "Date")
Firm_yearly <- Firm_yearly[order(Firm_yearly$Company, Firm_yearly$Date), ]
Firm_yearly$Return <- with(Firm_yearly, ave(value, Company, FUN = function(x) c(NA, diff(x))))
Firm_yearly$DCAC40 = c(NA, diff(Firm_yearly$CAC40))
Firm_yearly$Doat = c(NA, diff(Firm_yearly$oat))
Firm_yearly$mkt_free = Firm_yearly$DCAC40 - Firm_yearly$Doat
filtered_Firm_yearly <- Firm_yearly %>% #Filter rows between 2010 and 2022 (no missing values)
filter(Date >= as.Date("2010-01-01") & Date <= as.Date("2022-12-31"))
View(Firm_yearly)
View(Firm_yearly)
View(filtered_Firm_yearly)
fit_lm_myFFonly <- function(data) {
lm(Return ~ Mkt_RF+HMLest+SMBest, data = data)
}
year_by_stock_FF = split(filtered_Firm_yearly, filtered_Firm_yearly$Company.x)
regs_beta_myFF <- lapply(year_by_stock_FF, function(subset) fit_lm_myFFonly(subset))
stargazer(regs_beta_myFF,
title = "Estimate the beta coefficients for computed French and Fama factors (2010-2022)",
column.labels = names(regs_beta_myFF),
out="Tables/betas_myff.tex")
Firm_yearly$Return <- with(Firm_yearly, ave(value, Company, FUN = function(x) c(NA, diff(x))))
Firm_yearly <- Firm_yearly[order(Firm_yearly$Company, Firm_yearly$Date), ]
Firm_yearly <- Firm_yearly[order(Firm_yearly$Company.x, Firm_yearly$Date), ]
Firm_yearly$Return <- with(Firm_yearly, ave(value, Company.x, FUN = function(x) c(NA, diff(x))))
Firm_yearly$Return <- with(Firm_yearly, ave(value.x, Company.x, FUN = function(x) c(NA, diff(x))))
Firm_yearly$DCAC40 = c(NA, diff(Firm_yearly$CAC40))
Firm_yearly$Doat = c(NA, diff(Firm_yearly$oat))
Firm_yearly$mkt_free = Firm_yearly$DCAC40 - Firm_yearly$Doat
filtered_Firm_yearly <- Firm_yearly %>% #Filter rows between 2010 and 2022 (no missing values)
filter(Date >= as.Date("2010-01-01") & Date <= as.Date("2022-12-31"))
fit_lm_myFFonly <- function(data) {
lm(Return ~ Mkt_RF+HMLest+SMBest, data = data)
}
year_by_stock_FF = split(filtered_Firm_yearly, filtered_Firm_yearly$Company.x)
regs_beta_myFF <- lapply(year_by_stock_FF, function(subset) fit_lm_myFFonly(subset))
fit_lm_myFFonly <- function(data) {
lm(Return ~ Mkt-RF+HMLest+SMBest, data = data)
}
year_by_stock_FF = split(filtered_Firm_yearly, filtered_Firm_yearly$Company.x)
regs_beta_myFF <- lapply(year_by_stock_FF, function(subset) fit_lm_myFFonly(subset))
fit_lm_myFFonly <- function(data) {
lm(Return ~ Mkt.RF+HMLest+SMBest, data = data)
}
year_by_stock_FF = split(filtered_Firm_yearly, filtered_Firm_yearly$Company.x)
regs_beta_myFF <- lapply(year_by_stock_FF, function(subset) fit_lm_myFFonly(subset))
#### FF model with annual data and our estimation for this sample
Firm_yearly <- read_csv("Firm_yearly.csv")
Firm_yearly = merge(Firm_yearly,
Firm_yearly%>%
filter(!is.na(MarketCap))%>%
group_by(Date)%>%
dplyr::summarise(MedianMCt=median(MarketCap)),
by="Date")
DiffMC = merge(
Firm_yearly%>%
filter(!is.na(MarketCap) & MarketCap>MedianMCt & !is.na(value))%>%
group_by(Date)%>%
dplyr::summarise(AvgTop = mean(value)),
Firm_yearly%>%
filter(!is.na(MarketCap) & MarketCap<MedianMCt & !is.na(value))%>%
group_by(Date)%>%
dplyr::summarise(AvgBot = mean(value)),
by = "Date")
DiffMC$SMBest = DiffMC$AvgTop-DiffMC$AvgBot
Firm_yearly = merge(Firm_yearly,
Firm_yearly%>%
filter(!is.na(BookMarket))%>%
group_by(Date)%>%
dplyr::summarise(MedianBMt=median(BookMarket)),
by="Date")
DiffBM = merge(
Firm_yearly%>%
filter(!is.na(BookMarket) & BookMarket>MedianBMt & !is.na(value))%>%
group_by(Date)%>%
dplyr::summarise(AvgTop = mean(value)),
Firm_yearly%>%
filter(!is.na(BookMarket) & BookMarket<MedianBMt & !is.na(value))%>%
group_by(Date)%>%
dplyr::summarise(AvgBot = mean(value)),
by = "Date")
DiffBM$HMLest = DiffBM$AvgTop-DiffBM$AvgBot
Firm_yearly =merge(Firm_yearly, DiffBM, by = "Date")
Firm_yearly =merge(Firm_yearly, DiffMC, by = "Date")
Data_year = read_csv("DATA_yearly.csv")
Firm_yearly =merge(Firm_yearly, Data_year, by = "Date")
Firm_yearly$Date = as.Date(Firm_yearly$Date)
Firm_yearly <- Firm_yearly[order(Firm_yearly$Company.x, Firm_yearly$Date), ]
Firm_yearly$Return <- with(Firm_yearly, ave(value.x, Company.x, FUN = function(x) c(NA, diff(x))))
View(Firm_yearly)
View(Firm_yearly)
Firm_yearly$DCAC40 = c(NA, diff(Firm_yearly$CAC40))
Firm_yearly$Doat = c(NA, diff(Firm_yearly$oat))
Firm_yearly$mkt_free = Firm_yearly$DCAC40 - Firm_yearly$Doat
filtered_Firm_yearly <- Firm_yearly %>% #Filter rows between 2010 and 2022 (no missing values)
filter(Date >= as.Date("2010-01-01") & Date <= as.Date("2022-12-31"))
fit_lm_myFFonly <- function(data) {
lm(Return ~ Mkt.RF+HMLest+SMBest, data = data)
}
year_by_stock_FF = split(filtered_Firm_yearly, filtered_Firm_yearly$Company.x)
lm(Return ~ mkt_free+HMLest+SMBest, data = data)
fit_lm_myFFonly <- function(data) {
lm(Return ~ mkt_free+HMLest+SMBest, data = data)
}
fit_lm_myFFonly <- function(data) {
lm(Return ~ mkt_free+HMLest+SMBest, data = data)
}
year_by_stock_FF = split(filtered_Firm_yearly, filtered_Firm_yearly$Company.x)
regs_beta_myFF <- lapply(year_by_stock_FF, function(subset) fit_lm_myFFonly(subset))
stargazer(regs_beta_myFF,
title = "Estimate the beta coefficients for computed French and Fama factors (2010-2022)",
column.labels = names(regs_beta_myFF),
out="Tables/betas_myff.tex")
#Extarct the beta coefficients of reg with exo and FF factors
# Initialize an empty dataframe to store coefficients and model names
coefficients_df <- data.frame(Model = character(), Intercept = numeric(),
res_pib = numeric(), res_xr = numeric(),
res_infl = numeric(), HML = numeric(),
SMB = numeric(), Mkt.RF = numeric(),
stringsAsFactors = FALSE)
# Iterate through subsets of data and fit models
for (i in seq_along(dta_bystock)) {
subset <- dta_bystock[[i]]
model <- fit_lm_exoff(subset)
# Extract coefficients
coefficients <- c(model$coefficients[1], model$coefficients[-1])
# Create a row with model name and coefficients
row <- data.frame(Model = paste0("Model_", i),
Intercept = coefficients[1],
res_pib = coefficients[2],
res_xr = coefficients[3],
res_infl = coefficients[4],
HML = coefficients[5],
SMB = coefficients[6],
Mkt.RF = coefficients[7])
# Append row to the coefficients dataframe
coefficients_df <- rbind(coefficients_df, row)
}
coefficients_df
coefficients_df$Company = names(fit_lm_exoff)
coefficients_df
coefficients_df$Company = names(fit_lm_exoff)
coefficients_df
coefficients_df$Company
names(fit_lm_exoff)
names(regs_beta_exoff)
coefficients_df$Company = names(regs_beta_exoff)
coefficients_df
colnames(dta_bystock)
colnames(finalmonthly)
historical_mean_returns <- finalmonthly %>%
group_by(Company) %>%
summarise(mean_return = mean(Return, na.rm = TRUE))
# View the resulting dataframe with mean returns by company
print(historical_mean_returns)
#merge two data sets
multibeta = merge(coefficients_df, historical_mean_returns, by="Company")
historical_mean_returns <- finalmonthly %>%
group_by(Company) %>%
summarise(mean_return = mean(Return - Intercept, na.rm = TRUE))
historical_mean_returns <- finalmonthly %>%
group_by(Company) %>%
summarise(mean_return = mean(Return, na.rm = TRUE))
#merge two data sets
multibeta = merge(coefficients_df, historical_mean_returns, by="Company")
multibeta$mean_intercept = multibeta$mean_return - multibeta$Intercept
model_multibeta = lm(mean_intercept ~ res_pib+res_xr+res_infl+HML+SMB, data= multibeta)
summary(model_multibeta)
# Iterate through subsets of data and fit models
for (i in seq_along(dta_bystock)) {
subset <- dta_bystock[[i]]
model <- fit_lm_exoff(subset)
coefficients <- c(model$coefficients[1], model$coefficients[-1])
row <- data.frame(Model = paste0("Model_", i),
Intercept = coefficients[1],
beta_pib = coefficients[2],
beta_xt = coefficients[3],
beta_infl = coefficients[4],
beta_HML = coefficients[5],
beta_SMB = coefficients[6],
beta_Mkt.RF = coefficients[7])
coefficients_df <- rbind(coefficients_df, row)
}
#Extarct the beta coefficients of reg with exo and FF factors
# Initialize an empty dataframe to store coefficients and model names
coefficients_df <- data.frame(Model = character(), Intercept = numeric(),
beta_pib = numeric(), beta_xr = numeric(),
beta_infl = numeric(), beta_HML = numeric(),
beta_SMB = numeric(), beta_Mkt.RF = numeric(),
stringsAsFactors = FALSE)
# Iterate through subsets of data and fit models
for (i in seq_along(dta_bystock)) {
subset <- dta_bystock[[i]]
model <- fit_lm_exoff(subset)
coefficients <- c(model$coefficients[1], model$coefficients[-1])
row <- data.frame(Model = paste0("Model_", i),
Intercept = coefficients[1],
beta_pib = coefficients[2],
beta_xt = coefficients[3],
beta_infl = coefficients[4],
beta_HML = coefficients[5],
beta_SMB = coefficients[6],
beta_Mkt.RF = coefficients[7])
coefficients_df <- rbind(coefficients_df, row)
}
coefficients_df
coefficients_df$Company = names(regs_beta_exoff) #added column with company name
historical_mean_returns <- finalmonthly %>%
group_by(Company) %>%
summarise(mean_return = mean(Return, na.rm = TRUE))
#merge two data sets
multibeta = merge(coefficients_df, historical_mean_returns, by="Company")
## Get return - intercept
multibeta$mean_intercept = multibeta$mean_return - multibeta$Intercept
model_multibeta = lm(mean_intercept ~ beta_pib+beta_xr+beta_infl+beta_HML+beta_SMB+beta_Mkt.RF, data= multibeta)
model_multibeta = lm(mean_intercept ~ beta_pib+beta_xt+beta_infl+beta_HML+beta_SMB+beta_Mkt.RF, data= multibeta)
summary(model_multibeta)
stargazer(model_multibeta, out=LM_multibeta)
stargazer(model_multibeta, out='Tables/LM_multibeta.tex')
pacman::p_load(data.table, urca, dotwisker, tidyverse, gplots, xts, stargazer, forecast, plm, ggplot2, tidyr)
dwplot(regs_beta)
dwplot(regs_beta[1])
library(dotwhisker)
install.packages(gotwhisker)
install.packages("dotwhisker")
library(dotwhisker)
dwplot(regs_beta[1])
dwplot(regs_beta)
# Set up the plotting area
par(mfrow = c(5, 6))
for (i in seq_along(regs_beta)) {
plot_name <- paste("Regression", i)
dwplot(regs_beta[[i]], main = plot_name) # Create the dot-and-whisker plot
}
# Reset the plotting layout to default
par(mfrow = c(1, 1))
dwplot(regs_beta, ggtitle("Exogeneous variables"))
dwplot(regs_beta)
dwplot(regs_beta_endo)
dwplot(regs_beta_exoff)
dwplot(regs_beta_myFF)
## Use GLS to correct the regression
library(lname)
## Use GLS to correct the regression
library(nlame)
## Use GLS to correct the regression
library(nlme)
#get the var-cov matrix of the initial regression to use as weights
resid = residuals(regs_beta_exoff)
var_cov = cov(resid)
resid
#get the var-cov matrix of the initial regression to use as weights
resid = residuals(regs_beta_exoff)
resid
#get the var-cov matrix of the initial regression to use as weights
resid = residuals(regs_beta_exoff[1])
resid
regs_beta_exoff
regs_beta_exoff$vivendi$residuals
regs_beta_exoff$residuals
regs_beta_exoff$all$residuals
regs_beta_exoff$all_$residuals
regs_beta_exoff$_all
regs_beta_exoff$all_
regs_beta_exoff$`x`$residuals
#get the var-cov matrix of the initial regression to use as weights
for (x in colnames(regs_beta_exoff)){
regs_beta_exoff$`x`$residuals
}
#get the var-cov matrix of the initial regression to use as weights
resid = for (x in colnames(regs_beta_exoff)){
regs_beta_exoff$`x`$residuals
}
#get the var-cov matrix of the initial regression to use as weights
for (x in colnames(regs_beta_exoff)){
x
}
#get the var-cov matrix of the initial regression to use as weights
for (x in colnames(regs_beta_exoff)){
print(x)
}
colnames(regs_beta_exoff)
regs_beta_exoff
names(regs_beta_exoff)
#get the var-cov matrix of the initial regression to use as weights
for (x in names(regs_beta_exoff)){
print(x)
}
#get the var-cov matrix of the initial regression to use as weights
for (x in names(regs_beta_exoff)){
regs_beta_exogg$`x`$residuals
}
#get the var-cov matrix of the initial regression to use as weights
for (x in names(regs_beta_exoff)){
regs_beta_exoff$`x`$residuals
}
#get the var-cov matrix of the initial regression to use as weights
residuals_list <- list()
for (i in seq_along(regs_beta)) {
# Get residuals for each model
residuals <- residuals(regs_beta[[i]])
# Store residuals in the list
residuals_list[[i]] <- residuals
}
residuals_list
#get the var-cov matrix of the initial regression to use as weights
residuals_list <- list()
for (i in seq_along(regs_beta_exoff)) {
# Get residuals for each model
residuals <- residuals(regs_beta[[i]])
# Store residuals in the list
residuals_list[[i]] <- residuals
}
var_cov = cov(residuals_list)
typeof(residuals_list)
lenght(residuals_list)
#get the var-cov matrix of the initial regression to use as weights
residuals_list <- list()
for (i in seq_along(regs_beta_exoff)) {
# Get residuals for each model
residuals <- residuals(regs_beta[[i]])
# Store residuals in the list
residuals_list[[i]] <- residuals
# Calculate variance-covariance matrix of residuals
var_cov_matrix <- cov(residuals)
# Display or use var_cov_matrix as needed for each model
print(var_cov_matrix)
}
#get the var-cov matrix of the initial regression to use as weights
residuals_list <- list()
# Loop through each model to extract residuals
for (i in seq_along(regs_beta_exoff)) {
# Get residuals for each model
residuals <- residuals(regs_beta[[i]])
# Store residuals in the list
residuals_list[[i]] <- residuals
}
# Combine residuals into a single matrix
combined_residuals <- do.call(rbind, residuals_list)
# Calculate variance-covariance matrix of combined residuals
var_cov_matrix_pooled <- cov(combined_residuals)
inv_var_cov = solve(var_cov)
inv_var_cov = solve(var_cov_matrix_pooled)
install.packages("MASS")
install.packages("MASS")
#get the var-cov matrix of the initial regression to use as weights
residuals_list <- list()
# Loop through each model to extract residuals
for (i in seq_along(regs_beta_exo)) {
# Get residuals for each model
residuals <- residuals(regs_beta[[i]])
# Store residuals in the list
residuals_list[[i]] <- residuals
}
# Loop through each model to extract residuals
for (i in seq_along(regs_beta)) {
# Get residuals for each model
residuals <- residuals(regs_beta[[i]])
# Store residuals in the list
residuals_list[[i]] <- residuals
}
# Combine residuals into a single matrix
combined_residuals <- do.call(rbind, residuals_list)
# Calculate variance-covariance matrix of combined residuals
var_cov_matrix_pooled <- cov(combined_residuals)
inv_var_cov = solve(var_cov_matrix_pooled)
library(MASS)
library(MASS)
residuals_list <- list()
# Loop through each model to extract residuals
for (i in seq_along(regs_beta_exoff)) {
# Get residuals for each model
residuals <- residuals(regs_beta[[i]])
# Store residuals in the list
residuals_list[[i]] <- residuals
}
# Combine residuals into a single matrix
combined_residuals <- do.call(rbind, residuals_list)
# Calculate variance-covariance matrix of combined residuals
var_cov_matrix_pooled <- cov(combined_residuals)
inv_var_cov = solve(var_cov_matrix_pooled)
corr_struct = corMatrix(value=inv_var_cov)
corr_struct = corMatrix(value=var_cov_matrix_pooled)
View(var_cov_matrix_pooled)
## Use GLS to correct the regression
library(nlme)
#get the var-cov matrix of the initial regression to use as weights
resid = model_multibeta$residuals
# Calculate variance-covariance matrix of combined residuals
var_cov_matrix <- cov(resid)
#get the var-cov matrix of the initial regression to use as weights
resid = residuals(model_multibeta)
# Calculate variance-covariance matrix of combined residuals
var_cov_matrix <- cov(resid)
resid
typeof(resid)
resid2 = matrix(resid, ncol = 1)
# Calculate variance-covariance matrix of combined residuals
var_cov_matrix <- cov(resid2)
inv_var_cov = solve(var_cov_matrix)
corr_struct = corMatrix(value=inv_var_cov)
?corMatrix
model_multibeta2 = gls(mean_intercept ~ beta_pib+beta_xt+beta_infl+beta_HML+beta_SMB+beta_Mkt.RF, data= multibeta, weights=inv_var_cov)
corr_struct = corMatrix(value=inv_var_cov)
corr_struct = corMatrix(inv_var_cov)
View(inv_var_cov)
corr_struct = corMatrix(var_cov_matrix_pooled)
resid[1]
resid[:1]
resid[,1]
resid[]
# Calculate variance-covariance matrix of combined residuals
var_cov_matrix <- cov(resid)
stargazer(regs_beta,
title = "Estimate the beta coefficients for each exogeneous factor",
column.labels = names(regs_beta),
out="Tables/betas_exo.tex")
stargazer(regs_beta,
title = "Estimate the beta coefficients for each exogeneous factor",
column.labels = names(regs_beta),
type = "html", out = "betas_exo.html")
stargazer(regs_beta_endo,
title = "Estimate the beta coefficients for each exogeneous and endogeneous factor ",
column.labels = names(regs_beta),
type = "html", out = "betas_exo_endo.html")
stargazer(regs_beta_exoff,
title = "Estimate the beta coefficients for each exogeneous and French and Fama factor",
column.labels = names(regs_beta),
type = "html", out = "betas_exo_ff.html")
stargazer(regs_beta_myFF,
title = "Estimate the beta coefficients for French and Fama factors",
column.labels = names(regs_beta),
type = "html", out = "betas_ff.html")
